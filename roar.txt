#Q.1  Create a vector containing 25 random integers between -100 and 100. Extract and display only the negative values and their positions.
set.seed(1)  # For reproducibility
v <- sample(-100:100, 25, replace=TRUE)
neg_idx <- which(v < 0)
neg_values <- v[neg_idx]
data.frame(Position=neg_idx, Value=neg_values)

#Q.2 Given a string IP address like '172.168.45.112:3306', extract only the port number using `substr()` or similar methods.
ip="172.168.45.112:3306"            
abc=substr(ip,16,19)
abc

#Q.3 Simulate a machine status log of 1000 entries with values 'working', 'faulty', and 'maintenance' in the ratio 6:2:2. Use `sample()` and find the percentage of each status.
set.seed(2)
status <- sample(c('working', 'faulty', 'maintenance'), 
                 1000, replace=TRUE, prob=c(0.6, 0.2, 0.2))
round(100 * table(status) / length(status), 2)

#Q.4 Generate a vector of 100 real numbers using `runif()` between 0 and 100. Count how many numbers fall in the range [25, 50].
set.seed(3)
nums <- runif(100, 0, 100)
sum(nums >= 25 & nums <= 50)

#Q.5 Given a named list containing a numeric vector, a character vector, and a logical vector, replace the third element of each with a new value using list indexing.
lst <- list(nums = 1:5, chars = letters[1:5], logs = rep(TRUE, 5))
lst$nums[3] <- 999
lst$chars[3] <- "new"
lst$logs[3] <- FALSE
print(lst)

#Q.6 Given a character vector that includes some NA values, convert all non-NA elements to uppercase. Ensure that NA values remain unchanged in the final output. Demonstrate the steps using indexing and basic vector operations.
v <- c("apple", NA, "banana", "Cat", NA)
toupper(v)

is_not_na <- !is.na(v)
v[is_not_na] <- toupper(v[is_not_na])
print(v)

#Q.7 Create a data frame with two columns: student name and score. Replace all names starting with the letter 'A' with 'Anonymous' using `sub()` or `gsub()`.
df <- data.frame(name = c('Alice', 'Bob', 'Amy', 'Charlie'), 
                 score = c(80, 65, 90, 70))
df$name <- gsub('^A', 'Anonymous', df$name)
print(df)

#Q.8 Using a vector of mixed numeric and character values, coerce it to numeric and handle resulting NA values gracefully. Compute the mean excluding NA.
v <- c("10", "20", "hello", "40")
v_num <- as.numeric(v)
print(v_num)  # NAs produced for non-numeric
mean(v_num, na.rm=TRUE)

#Q.9 Construct a named list of 3 elements: one vector of even numbers, one character vector, and one logical. Extract all elements where the logical is TRUE.
lst <- list(even = seq(2, 10, 2), chars = letters[1:5], 
            logs = c(TRUE, FALSE, TRUE, FALSE, TRUE))
lst$even[lst$logs]
lst$chars[lst$logs]

#Q.10 Generate a sequence of numbers between 50 and 5 in steps of -2. Filter and display all values that are divisible by 3.
s <- seq(50, 5, by=-2)
s[s %% 3 == 0]

#Q.11 Create a vector of 10 random numbers. Replace the 3rd, 6th, and 9th elements with the string 'NA_val' and identify which entries are not numeric.
set.seed(4)
v <- runif(10) #for random values(runif)
v[c(3,6,9)] <- "NA_val"
!is.na(as.numeric(v))

#Q.12 Simulate a small text-cleaning operation by replacing all punctuation from a string vector of length 5 using `gsub()` and report the cleaned output.
vec <- c("Hello!", "Wow...?", "R's #1.", "Good, day!", "Test@R*")
cleaned <- gsub("[[:punct:]]", "", vec)
print(cleaned)

#Q.13 Using a list of vectors with different lengths, write an R function that returns the maximum value from each vector using `lapply()`.
lst <- list(a = 1:5, b = 10:12, c = c(-2,3))
lapply(lst, max)

#Q.14 Create a frequency table of a sampled character vector with values 'low', 'medium', 'high'. Sort it in decreasing order using `sort()`.
set.seed(5)
vals <- sample(c('low','medium','high'), 20, replace=TRUE)
tbl <- table(vals)
sort(tbl, decreasing=TRUE)

#Q.15 Construct two vectors of different lengths and perform vectorized operations like addition or multiplication. Handle any warnings or errors using conditional logic.
a <- 1:5
b <- c(10, 20)
res <- tryCatch(
  a + b,
  warning = function(w) { 
    print("Warning: recycling!"); 
    a + rep(b, length.out=length(a)) 
  }
)
print(res)


R Lab: Data Frames, dplyr, and ggplot2 (Simple Level)

Instructions:
- Create data frames from scratch using vectors (c(), seq(), rep(), etc.).
- Use base R or tidyverse functions as hinted in each question.
- No external files needed.

A) Create Data Frames (from scratch)
1) Weekly Pocket Expenses
   Create a data frame pocket with 7 rows for Mon–Sun containing:
   - day (character or factor),
   - snacks_spend (₹; integers),
   - travel_spend (₹; integers).
   Add a column total_spend = snacks_spend + travel_spend.
   Target: c(), factor(), data.frame(), transform() or within() / $

2) Simple SIP Log
   Make sip_log for 6 months (Jan–Jun) with: month (abbreviations), amount (₹; same value each month), and nav (a small numeric vector you choose).
   Target: month.abb, indexing, data.frame()

3) Cashbook of 10 Transactions
   Build cashbook with 10 rows: date (any 10 consecutive dates), type (“Debit”/“Credit”), category (“Groceries”, “Fuel”, …), amount (₹). Ensure at least 3 categories.
   Target: seq.Date(), as.Date(), sample(), rep()

4) Monthly Rainfall (1 Year)
   Create rain_2024 with 12 rows: month (Jan–Dec), rain_mm (numeric you choose), raindays (integer 0–31).
   Target: data.frame(), set.seed() (optional)

5) Two-City Weekly Rainfall
   Make rain_week (14 rows) with columns: day, city (two levels: “CityA”, “CityB”), rain_mm. Enter CityA values first, then CityB values.
   Target: rep(), factor(), tibble::tibble()

6) Station Metadata + Readings (Join practice)
   Create two frames:
   - stations: station_id (S1–S3), altitude_m, zone (“Coastal”, “Inland”).
   - readings: 15 rows with station_id (repeated), date (any 5 days × 3 stations), rain_mm.
   Target: paste0(), expand.grid() or rep() patterns

B) dplyr Practice (use frames from Section A)
7) Select & Arrange (Finance)
   From cashbook, select date, category, amount, then arrange by amount descending and show the top 5 rows.
   Target: select(), arrange(), slice_head()

8) Filter by Category (Finance)
   Filter cashbook to only “Groceries” and “Fuel”, then show total spent.
   Target: filter(), summarise()

9) Monthly Averages (SIP)
   From sip_log, compute the mean of nav and the total invested (amount).
   Target: summarise(), n()

10) Mutate New Column (Finance)
    In pocket, create over_100 = total_spend > 100. Count how many days are TRUE.
    Target: mutate(), summarise()

11) Group & Summarise (Rainfall)
    On rain_2024, compute total annual rain and the average rain per rainy day (rain_mm / raindays) only where raindays > 0.
    Target: filter(), summarise(), na.rm = TRUE

12) Top Rainy Months
    From rain_2024, return the 3 months with highest rain_mm.
    Target: arrange(desc()), slice_head(n = 3)

13) Two-City Comparison
    Using rain_week, group by city and compute mean rain_mm.
    Target: group_by(), summarise()

14) Wide → Long (optional tidy)
    If you instead had columns rain_cityA and rain_cityB, show how you’d convert to long format with columns city and rain_mm.
    Target: tidyr::pivot_longer()

15) Left Join (Stations)
    Join readings with stations to attach altitude_m and zone to each reading. Then compute average rain_mm by zone.
    Target: left_join(), group_by(), summarise()

16) Filter + Arrange Combo (Finance)
    From cashbook, find the largest “Debit” transaction and its category.
    Target: filter(type == "Debit"), arrange(desc(amount)), slice_head(n = 1)

17) Mutate with Conditions (Rainfall)
    In rain_2024, add season with levels: “Winter” (Dec–Feb), “Pre-Monsoon” (Mar–May), “Monsoon” (Jun–Sep), “Post-Monsoon” (Oct–Nov). Then total rain_mm by season.
    Target: case_when(), group_by(), summarise()

18) Handling Missing Values
    Intentionally insert 2 NA values into rain_2024$rain_mm, then compute the mean safely.
    Target: replace(), mean(..., na.rm = TRUE)

C) ggplot2 Practice (use frames from Section A/B)
19) Line Chart – Monthly Rain
    Plot rain_mm vs month from rain_2024 as a line chart with points.
    Target: geom_line(), geom_point(), labs(), theme_minimal()

20) Bar Chart – Category Spend
    From cashbook, bar chart of total amount by category.
    Target: group_by(), summarise(), geom_col()

21) Boxplot – Daily Spend
    From pocket, make a boxplot of total_spend.
    Target: geom_boxplot()

22) Two-City Weekly Rain (Grouped Bars)
    Using rain_week, create a grouped bar chart (day on x, rain_mm as height, fill = city).
    Target: geom_col(position = "dodge"), scale_x_discrete()

23) Scatter – SIP NAV Trend
    From sip_log, scatter plot month vs nav with a simple line connecting points.
    Target: geom_point(), geom_line()

24) Facet Plot – Station Zones
    After joining readings + stations, line plot of rain_mm over date for each station_id, faceted by zone.
    Target: facet_wrap(~ zone) or facet_grid(zone ~ .)

25) Ordering Bars
    Re-plot Q20 but order categories by total spend (descending).
    Target: reorder() or forcats::fct_reorder()

26) Labels & Themes
    Take any plot above and add a title, axis labels, and minimal theme.
    Target: labs(title, x, y), theme_minimal()


#Q1
1) Weekly Pocket Expenses
   Create a data frame pocket with 7 rows for Mon–Sun containing:
   - day (character or factor),
   - snacks_spend (₹; integers),
   - travel_spend (₹; integers).
   Add a column total_spend = snacks_spend + travel_spend.
   Target: c(), factor(), data.frame(), transform() or within() / $

day <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
snacks_spend <- c(30, 25, 40, 35, 50, 60, 45)  
travel_spend <- c(20, 30, 25, 40, 35, 50, 30) 
pocket <- data.frame(day, snacks_spend, travel_spend)

pocket$total_spend <- pocket$snacks_spend + pocket$travel_spend
print(pocket)


#Q2
#first 6 months using month.abb
month <- month.abb[1:6]   # January to June
amount <- rep(2000, 6)    
nav <- c(15.2, 15.5, 15.8, 16.0, 16.3, 16.5)
sip_log <- data.frame(month, amount, nav)
print(sip_log)

#Q3
date <- seq.Date(from = as.Date("2025-08-01"), by = "day", length.out = 10)
set.seed(1)
type <- sample(c("Debit", "Credit"), 10, replace = TRUE)
category <- sample(c("Groceries", "Fuel", "Entertainment"), 10, replace = TRUE)
amount <- sample(100:1000, 10, replace = TRUE)
cashbook <- data.frame(date, type, category, amount)
print(cashbook)

#Q4
month1 <- month.abb[1:12] #January to December
set.seed(2)
rain_mm = sample(10:100, 12, replace=TRUE)
raindays = sample(0:31, 12, replace=TRUE)
rain_data = data.frame(month1, rain_mm, raindays)
rain_data

#Q5
library(tibble)
day <- rep(c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"), times = 2)
city <- factor(rep(c("CityA", "CityB"), each = 7))
rain_mm <- c(5, 0, 12, 8, 15, 3, 0, 10, 5, 20, 0, 8, 12, 4) 
rain_week <- tibble(day, city, rain_mm)
rain_week

#Q6
station_id <- paste0("S", 1:3)
altitude_m <- c(5, 120, 250)
zone <- c("Coastal", "Inland", "Inland")
stations <- data.frame(station_id, altitude_m, zone)

dates <- as.Date("2025-08-01") + 0:4
readings <- expand.grid(date = dates, station_id = station_id)

set.seed(1)
readings$rain_mm <- sample(0:30, 15, replace = TRUE)

print(stations)
print(readings)


##DPLYR Practise
install.packages("dplyr")
library(dplyr)

#Q7
cashbook %>% select(date, category, amount) %>% arrange(desc(amount)) %>% slice_head(n = 5)  

#Q8
cashbook %>% filter(category %in% c("Groceries", "Fuel")) %>% summarise(total_spent = sum(amount))  

#Q9
sip_log %>% summarise(mean_nav = mean(nav), total_invested = sum(amount), months_count = n())

#Q10
pocket %>% mutate(over_100 = total_spend > 100) %>% summarise(days_over_100 = sum(over_100))

#Q11
rain_data %>% filter(raindays > 0) %>% summarise(total_rain = sum(rain_mm), avg_rain_per_day = sum(rain_mm) / sum(raindays))

#Q12
rain_data %>% arrange(desc(rain_mm)) %>% slice_head(n = 3)  

#Q13
rain_week %>% group_by(city) %>% summarise(mean_rain = mean(rain_mm)) 

#Q14
install.packages("tidyr")
library(tidyr)
library(dplyr)
rain_wide <- data.frame(day = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),
                        rain_cityA = c(5, 0, 12, 8, 15, 3, 0),
                        rain_cityB = c(10, 5, 20, 0, 8, 12, 4))

rain_long <- rain_wide %>% pivot_longer(
    cols = c(rain_cityA, rain_cityB),  
    names_to = "city",                  
    values_to = "rain_mm") %>% mutate(city = sub("rain_", "", city))  
rain_long

#Q15
readings_joined <- readings %>% left_join(stations, by = "station_id")
readings_joined %>% group_by(zone) %>% summarise(avg_rain = mean(rain_mm, na.rm = TRUE))

#Q16
cashbook %>% filter(type == "Debit") %>% arrange(desc(amount)) %>% slice_head(n = 1)

#Q17
rain_2024 <- data.frame(month = month.abb, rain_mm = sample(10:150, 12, replace = TRUE))

rain_2024 %>% mutate(season = case_when(
    month %in% c("Dec", "Jan", "Feb") ~ "Winter",
    month %in% c("Mar", "Apr", "May") ~ "Pre-Monsoon",
    month %in% c("Jun", "Jul", "Aug", "Sep") ~ "Monsoon",
    month %in% c("Oct", "Nov") ~ "Post-Monsoon")) %>% group_by(season) %>% summarise(total_rain = sum(rain_mm))

#Q18
rain_2024$rain_mm[c(3, 7)] <- NA
mean(rain_2024$rain_mm, na.rm = TRUE)

library(ggplot2)

#Q19
ggplot(rain_2024, aes(x = month, y = rain_mm, group = 1)) +
  geom_line(color = "blue") +
  geom_point(size = 3, color = "red") +
  labs(title = "Monthly Rainfall 2024", x = "Month", y = "Rain (mm)") +
  theme_minimal()

#Q20
cashbook %>% group_by(category) %>% summarise(total_amount = sum(amount)) %>%
  ggplot(aes(x = category, y = total_amount, fill = category)) +
  geom_col() +
  labs(title = "Total Spend by Category", x = "Category", y = "Total Amount") +
  theme_minimal()

#Q21
ggplot(pocket, aes(y = total_spend)) +
  geom_boxplot(fill = "skyblue") +
  labs(title = "Boxplot of Daily Total Spend", y = "Total Spend") +
  theme_minimal()

#Q22
ggplot(rain_week, aes(x = day, y = rain_mm, fill = city)) +
  geom_col(position = "dodge") +
  scale_x_discrete(limits = c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")) +
  labs(title = "Weekly Rainfall by City", x = "Day", y = "Rain (mm)") +
  theme_minimal()

#Q23
ggplot(sip_log, aes(x = month, y = nav, group = 1)) +
  geom_point(color = "darkgreen", size = 3) +
  geom_line(color = "darkgreen") +
  labs(title = "SIP NAV Trend", x = "Month", y = "NAV") +
  theme_minimal()

#Q24
readings_joined %>% ggplot(aes(x = date, y = rain_mm, color = station_id, group = station_id)) +
                    geom_line() +
                    geom_point() +
                    facet_wrap(~ zone) +
                    labs(title = "Rainfall Readings by Station Zone", x = "Date", y = "Rain (mm)") +
                    theme_minimal()

#Q25
cashbook %>% group_by(category) %>% summarise(total_amount = sum(amount)) %>%
  ggplot(aes(x = reorder(category, -total_amount), y = total_amount, fill = category)) +
  geom_col() +
  labs(title = "Total Spend by Category (Ordered)", x = "Category", y = "Total Amount") +
  theme_minimal()

#Q26
ggplot(sip_log, aes(x = month, y = nav, group = 1)) +
  geom_point(color = "purple", size = 3) +
  geom_line(color = "purple") +
  labs(title = "SIP NAV Over Time",
       x = "Month (Jan–Jun)",
       y = "NAV Value") +
  theme_minimal()







# 1. Load dataset
titanic <- read.csv("C:/Users/Ganesh/Downloads/Titanic_train - Titanic_train.csv")
print(titanic)

# 2. Head and tail
head(titanic)
tail(titanic)

# 3. Dimensions
dim(titanic)

# 4. Structure and summary
str(titanic)
summary(titanic)

# 5. Class of all columns
sapply(titanic, class)

# 6. Convert Survived and Sex to factor
titanic$Survived <- as.factor(titanic$Survived)
titanic$Sex <- as.factor(titanic$Sex)

# 7. Convert Pclass, Embarked, SibSp to factor
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$Embarked <- as.factor(titanic$Embarked)
titanic$SibSp <- as.factor(titanic$SibSp)

# 8. Check NA count per column
colSums(is.na(titanic))

# 9. Boxplot for Age
boxplot(titanic$Age, main="Boxplot of Age", col="lightblue")

# 10. Impute median to Age
titanic$Age[is.na(titanic$Age)] <- median(titanic$Age, na.rm=TRUE)

# 11. ggplot2 barplot Pclass
library(ggplot2)
ggplot(titanic, aes(x=Pclass, fill=Pclass)) + geom_bar() + ggtitle("Univariate Analysis - Pclass")

# 12. ggplot2 barplot Survived
ggplot(titanic, aes(x=Survived, fill=Survived)) +
  geom_bar() +
  ggtitle("Univariate Analysis - Survived") +
  ylab("No. of Passengers")

# 13. Histogram of Age
ggplot(titanic, aes(x=Age)) +
  geom_histogram(binwidth=5, fill="purple", color="black") +
  ggtitle("Univariate Analysis - Age") +
  xlab("Age")

# 14. Barplot Survived vs Sex
ggplot(titanic, aes(x=Survived, fill=Sex)) +
  geom_bar(position="dodge") +
  geom_text(stat="count", aes(label=..count..), position=position_dodge(width=0.9), vjust=-0.25) +
  xlab("Survived") + ylab("Count") +
  ggtitle("Survived vs Sex")

# 15. Barplot Survived vs Pclass
ggplot(titanic, aes(x=Survived, fill=Pclass)) +
  geom_bar(position="dodge") +
  geom_text(stat="count", aes(label=..count..), position=position_dodge(width=0.9), vjust=-0.25) +
  xlab("Survived") + ylab("Count") +
  ggtitle("Survived vs Pclass")

# 16. Mean and median of Age
mean(titanic$Age)
median(titanic$Age)

# 17. IQR and Range for Age
IQR(titanic$Age)
range(titanic$Age)

# 18. Separate survived and not survived
titanic_survived <- subset(titanic, Survived==1)
titanic_notsurvived <- subset(titanic, Survived==0)

# 19. Select Age and Survived, first 10 rows
library(dplyr)
titanic %>% select(Age, Survived) %>% head(10)

# 20. Drop Name, Fare, Ticket, PassengerId, Cabin
titanic <- titanic %>% select(-Name, -Fare, -Ticket, -PassengerId, -Cabin)

# 21. Group by Survived and Sex
titanic %>% group_by(Survived, Sex) %>% summarise(count=n())

# 22. Group by Sex and Survived
titanic %>% group_by(Sex, Survived) %>% summarise(count=n())

# 23. Group by Survived and summarise mean Age
titanic %>% group_by(Survived) %>% summarise(mean_age=mean(Age, na.rm=TRUE))

# 24. Create Age_Status column
titanic <- titanic %>% mutate(Age_Status = ifelse(Age<18, "Minor", "Major"))

# 25. Filter only male and get Embarked count
titanic %>% filter(Sex=="male") %>% group_by(Embarked) %>% summarise(count=n())


